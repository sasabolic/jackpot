plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "4.3.0.3225"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Jackpot Service'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.kafka:spring-kafka'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// TODO Delete...
// ---------------------------------------------------
// Code analysis configuration
// ---------------------------------------------------

jacocoTestReport {
	reports {
		xml.required.set(true)
	}
}

test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property "sonar.projectKey", "jackpot"
		property "sonar.projectName", "Jackpot"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_d23672748fd46698a2dd7aa90088df8d0b33ccc8"  // or your SonarQube token
		property "sonar.java.binaries", "build/classes/java/main"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}
